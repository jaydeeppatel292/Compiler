prog 
cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
classDecl SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class id SEMANTIC_MAKE_NODE_CLASS_ID oid SEMANTIC_MAKE_FAMILY_INHER_LIST { varfundecl SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class id SEMANTIC_MAKE_NODE_CLASS_ID oid SEMANTIC_MAKE_FAMILY_INHER_LIST { varfundecl SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility SEMANTIC_MAKE_NODE_CLASS_ID oid SEMANTIC_MAKE_FAMILY_INHER_LIST { varfundecl SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility SEMANTIC_MAKE_FAMILY_INHER_LIST { varfundecl SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { varfundecl SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { type id varFunTail SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int id varFunTail SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int id varFunTail SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 varFunTail SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ar SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL varfundecl SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL varfundecl SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL varfundecl SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; classDecl SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class id SEMANTIC_MAKE_NODE_CLASS_ID oid SEMANTIC_MAKE_FAMILY_INHER_LIST { varfundecl SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class id SEMANTIC_MAKE_NODE_CLASS_ID oid SEMANTIC_MAKE_FAMILY_INHER_LIST { varfundecl SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility SEMANTIC_MAKE_NODE_CLASS_ID oid SEMANTIC_MAKE_FAMILY_INHER_LIST { varfundecl SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : id mid SEMANTIC_MAKE_FAMILY_INHER_LIST { varfundecl SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : id mid SEMANTIC_MAKE_FAMILY_INHER_LIST { varfundecl SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility mid SEMANTIC_MAKE_FAMILY_INHER_LIST { varfundecl SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility SEMANTIC_MAKE_FAMILY_INHER_LIST { varfundecl SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { varfundecl SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { type id varFunTail SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int id varFunTail SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int id varFunTail SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 varFunTail SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 ar SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL varfundecl SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 arraySize SEMANTIC_MAKE_SIBLING_AR ar SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL varfundecl SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ integer ] SEMANTIC_MAKE_SIBLING_AR ar SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL varfundecl SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ integer ] SEMANTIC_MAKE_SIBLING_AR ar SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL varfundecl SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] SEMANTIC_MAKE_SIBLING_AR ar SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL varfundecl SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] SEMANTIC_MAKE_SIBLING_AR ar SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL varfundecl SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] arraySize SEMANTIC_MAKE_SIBLING_AR ar SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL varfundecl SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ integer ] SEMANTIC_MAKE_SIBLING_AR ar SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL varfundecl SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ integer ] SEMANTIC_MAKE_SIBLING_AR ar SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL varfundecl SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] SEMANTIC_MAKE_SIBLING_AR ar SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL varfundecl SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] SEMANTIC_MAKE_SIBLING_AR ar SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL varfundecl SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] arraySize SEMANTIC_MAKE_SIBLING_AR ar SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL varfundecl SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ integer ] SEMANTIC_MAKE_SIBLING_AR ar SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL varfundecl SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ integer ] SEMANTIC_MAKE_SIBLING_AR ar SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL varfundecl SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] SEMANTIC_MAKE_SIBLING_AR ar SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL varfundecl SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] SEMANTIC_MAKE_SIBLING_AR ar SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL varfundecl SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] arraySize SEMANTIC_MAKE_SIBLING_AR ar SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL varfundecl SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ integer ] SEMANTIC_MAKE_SIBLING_AR ar SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL varfundecl SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ integer ] SEMANTIC_MAKE_SIBLING_AR ar SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL varfundecl SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] SEMANTIC_MAKE_SIBLING_AR ar SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL varfundecl SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] SEMANTIC_MAKE_SIBLING_AR ar SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL varfundecl SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] arraySize SEMANTIC_MAKE_SIBLING_AR ar SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL varfundecl SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ integer ] SEMANTIC_MAKE_SIBLING_AR ar SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL varfundecl SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ integer ] SEMANTIC_MAKE_SIBLING_AR ar SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL varfundecl SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] SEMANTIC_MAKE_SIBLING_AR ar SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL varfundecl SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] SEMANTIC_MAKE_SIBLING_AR ar SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL varfundecl SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] arraySize SEMANTIC_MAKE_SIBLING_AR ar SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL varfundecl SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ integer ] SEMANTIC_MAKE_SIBLING_AR ar SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL varfundecl SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ integer ] SEMANTIC_MAKE_SIBLING_AR ar SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL varfundecl SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] SEMANTIC_MAKE_SIBLING_AR ar SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL varfundecl SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] SEMANTIC_MAKE_SIBLING_AR ar SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL varfundecl SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] arraySize SEMANTIC_MAKE_SIBLING_AR ar SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL varfundecl SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ integer ] SEMANTIC_MAKE_SIBLING_AR ar SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL varfundecl SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ integer ] SEMANTIC_MAKE_SIBLING_AR ar SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL varfundecl SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] SEMANTIC_MAKE_SIBLING_AR ar SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL varfundecl SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] SEMANTIC_MAKE_SIBLING_AR ar SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL varfundecl SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL varfundecl SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL varfundecl SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; type id varFunTail SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float id varFunTail SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float id varFunTail SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 varFunTail SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ar SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL varfundecl SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL varfundecl SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL varfundecl SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; type id varFunTail SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int id varFunTail SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int id varFunTail SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax varFunTail SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( fParams ) ; SEMANTIC_MAKE_FAMILY_FUNC_DECL SEMANTIC_MAKE_SIBLING_COMMON funcDeclRep SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( fParams ) ; SEMANTIC_MAKE_FAMILY_FUNC_DECL SEMANTIC_MAKE_SIBLING_COMMON funcDeclRep SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( type id ar SEMANTIC_MAKE_FAMILY_DIM_LIST SEMANTIC_MAKE_FAMILY_FPARAM fpTail SEMANTIC_MAKE_FAMILY_FPARAM_LIST ) ; SEMANTIC_MAKE_FAMILY_FUNC_DECL SEMANTIC_MAKE_SIBLING_COMMON funcDeclRep SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int id ar SEMANTIC_MAKE_FAMILY_DIM_LIST SEMANTIC_MAKE_FAMILY_FPARAM fpTail SEMANTIC_MAKE_FAMILY_FPARAM_LIST ) ; SEMANTIC_MAKE_FAMILY_FUNC_DECL SEMANTIC_MAKE_SIBLING_COMMON funcDeclRep SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int id ar SEMANTIC_MAKE_FAMILY_DIM_LIST SEMANTIC_MAKE_FAMILY_FPARAM fpTail SEMANTIC_MAKE_FAMILY_FPARAM_LIST ) ; SEMANTIC_MAKE_FAMILY_FUNC_DECL SEMANTIC_MAKE_SIBLING_COMMON funcDeclRep SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array ar SEMANTIC_MAKE_FAMILY_DIM_LIST SEMANTIC_MAKE_FAMILY_FPARAM fpTail SEMANTIC_MAKE_FAMILY_FPARAM_LIST ) ; SEMANTIC_MAKE_FAMILY_FUNC_DECL SEMANTIC_MAKE_SIBLING_COMMON funcDeclRep SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array arraySize SEMANTIC_MAKE_SIBLING_AR ar SEMANTIC_MAKE_FAMILY_DIM_LIST SEMANTIC_MAKE_FAMILY_FPARAM fpTail SEMANTIC_MAKE_FAMILY_FPARAM_LIST ) ; SEMANTIC_MAKE_FAMILY_FUNC_DECL SEMANTIC_MAKE_SIBLING_COMMON funcDeclRep SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ integer ] SEMANTIC_MAKE_SIBLING_AR ar SEMANTIC_MAKE_FAMILY_DIM_LIST SEMANTIC_MAKE_FAMILY_FPARAM fpTail SEMANTIC_MAKE_FAMILY_FPARAM_LIST ) ; SEMANTIC_MAKE_FAMILY_FUNC_DECL SEMANTIC_MAKE_SIBLING_COMMON funcDeclRep SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ integer ] SEMANTIC_MAKE_SIBLING_AR ar SEMANTIC_MAKE_FAMILY_DIM_LIST SEMANTIC_MAKE_FAMILY_FPARAM fpTail SEMANTIC_MAKE_FAMILY_FPARAM_LIST ) ; SEMANTIC_MAKE_FAMILY_FUNC_DECL SEMANTIC_MAKE_SIBLING_COMMON funcDeclRep SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] SEMANTIC_MAKE_SIBLING_AR ar SEMANTIC_MAKE_FAMILY_DIM_LIST SEMANTIC_MAKE_FAMILY_FPARAM fpTail SEMANTIC_MAKE_FAMILY_FPARAM_LIST ) ; SEMANTIC_MAKE_FAMILY_FUNC_DECL SEMANTIC_MAKE_SIBLING_COMMON funcDeclRep SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] SEMANTIC_MAKE_SIBLING_AR ar SEMANTIC_MAKE_FAMILY_DIM_LIST SEMANTIC_MAKE_FAMILY_FPARAM fpTail SEMANTIC_MAKE_FAMILY_FPARAM_LIST ) ; SEMANTIC_MAKE_FAMILY_FUNC_DECL SEMANTIC_MAKE_SIBLING_COMMON funcDeclRep SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] SEMANTIC_MAKE_FAMILY_DIM_LIST SEMANTIC_MAKE_FAMILY_FPARAM fpTail SEMANTIC_MAKE_FAMILY_FPARAM_LIST ) ; SEMANTIC_MAKE_FAMILY_FUNC_DECL SEMANTIC_MAKE_SIBLING_COMMON funcDeclRep SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] SEMANTIC_MAKE_FAMILY_FPARAM_LIST ) ; SEMANTIC_MAKE_FAMILY_FUNC_DECL SEMANTIC_MAKE_SIBLING_COMMON funcDeclRep SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; SEMANTIC_MAKE_FAMILY_FUNC_DECL SEMANTIC_MAKE_SIBLING_COMMON funcDeclRep SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; SEMANTIC_MAKE_FAMILY_FUNC_DECL SEMANTIC_MAKE_SIBLING_COMMON funcDeclRep SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; funcDecl SEMANTIC_MAKE_SIBLING_COMMON funcDeclRep SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; type id ( fParams ) ; SEMANTIC_MAKE_FAMILY_FUNC_DECL SEMANTIC_MAKE_SIBLING_COMMON funcDeclRep SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int id ( fParams ) ; SEMANTIC_MAKE_FAMILY_FUNC_DECL SEMANTIC_MAKE_SIBLING_COMMON funcDeclRep SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int id ( fParams ) ; SEMANTIC_MAKE_FAMILY_FUNC_DECL SEMANTIC_MAKE_SIBLING_COMMON funcDeclRep SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( fParams ) ; SEMANTIC_MAKE_FAMILY_FUNC_DECL SEMANTIC_MAKE_SIBLING_COMMON funcDeclRep SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( fParams ) ; SEMANTIC_MAKE_FAMILY_FUNC_DECL SEMANTIC_MAKE_SIBLING_COMMON funcDeclRep SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( type id ar SEMANTIC_MAKE_FAMILY_DIM_LIST SEMANTIC_MAKE_FAMILY_FPARAM fpTail SEMANTIC_MAKE_FAMILY_FPARAM_LIST ) ; SEMANTIC_MAKE_FAMILY_FUNC_DECL SEMANTIC_MAKE_SIBLING_COMMON funcDeclRep SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int id ar SEMANTIC_MAKE_FAMILY_DIM_LIST SEMANTIC_MAKE_FAMILY_FPARAM fpTail SEMANTIC_MAKE_FAMILY_FPARAM_LIST ) ; SEMANTIC_MAKE_FAMILY_FUNC_DECL SEMANTIC_MAKE_SIBLING_COMMON funcDeclRep SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int id ar SEMANTIC_MAKE_FAMILY_DIM_LIST SEMANTIC_MAKE_FAMILY_FPARAM fpTail SEMANTIC_MAKE_FAMILY_FPARAM_LIST ) ; SEMANTIC_MAKE_FAMILY_FUNC_DECL SEMANTIC_MAKE_SIBLING_COMMON funcDeclRep SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array ar SEMANTIC_MAKE_FAMILY_DIM_LIST SEMANTIC_MAKE_FAMILY_FPARAM fpTail SEMANTIC_MAKE_FAMILY_FPARAM_LIST ) ; SEMANTIC_MAKE_FAMILY_FUNC_DECL SEMANTIC_MAKE_SIBLING_COMMON funcDeclRep SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array arraySize SEMANTIC_MAKE_SIBLING_AR ar SEMANTIC_MAKE_FAMILY_DIM_LIST SEMANTIC_MAKE_FAMILY_FPARAM fpTail SEMANTIC_MAKE_FAMILY_FPARAM_LIST ) ; SEMANTIC_MAKE_FAMILY_FUNC_DECL SEMANTIC_MAKE_SIBLING_COMMON funcDeclRep SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ integer ] SEMANTIC_MAKE_SIBLING_AR ar SEMANTIC_MAKE_FAMILY_DIM_LIST SEMANTIC_MAKE_FAMILY_FPARAM fpTail SEMANTIC_MAKE_FAMILY_FPARAM_LIST ) ; SEMANTIC_MAKE_FAMILY_FUNC_DECL SEMANTIC_MAKE_SIBLING_COMMON funcDeclRep SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ integer ] SEMANTIC_MAKE_SIBLING_AR ar SEMANTIC_MAKE_FAMILY_DIM_LIST SEMANTIC_MAKE_FAMILY_FPARAM fpTail SEMANTIC_MAKE_FAMILY_FPARAM_LIST ) ; SEMANTIC_MAKE_FAMILY_FUNC_DECL SEMANTIC_MAKE_SIBLING_COMMON funcDeclRep SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] SEMANTIC_MAKE_SIBLING_AR ar SEMANTIC_MAKE_FAMILY_DIM_LIST SEMANTIC_MAKE_FAMILY_FPARAM fpTail SEMANTIC_MAKE_FAMILY_FPARAM_LIST ) ; SEMANTIC_MAKE_FAMILY_FUNC_DECL SEMANTIC_MAKE_SIBLING_COMMON funcDeclRep SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] SEMANTIC_MAKE_SIBLING_AR ar SEMANTIC_MAKE_FAMILY_DIM_LIST SEMANTIC_MAKE_FAMILY_FPARAM fpTail SEMANTIC_MAKE_FAMILY_FPARAM_LIST ) ; SEMANTIC_MAKE_FAMILY_FUNC_DECL SEMANTIC_MAKE_SIBLING_COMMON funcDeclRep SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] SEMANTIC_MAKE_FAMILY_DIM_LIST SEMANTIC_MAKE_FAMILY_FPARAM fpTail SEMANTIC_MAKE_FAMILY_FPARAM_LIST ) ; SEMANTIC_MAKE_FAMILY_FUNC_DECL SEMANTIC_MAKE_SIBLING_COMMON funcDeclRep SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] SEMANTIC_MAKE_FAMILY_FPARAM_LIST ) ; SEMANTIC_MAKE_FAMILY_FUNC_DECL SEMANTIC_MAKE_SIBLING_COMMON funcDeclRep SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; SEMANTIC_MAKE_FAMILY_FUNC_DECL SEMANTIC_MAKE_SIBLING_COMMON funcDeclRep SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; SEMANTIC_MAKE_FAMILY_FUNC_DECL SEMANTIC_MAKE_SIBLING_COMMON funcDeclRep SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; SEMANTIC_MAKE_FAMILY_VAR_FUNC_DECL } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; SEMANTIC_MAKE_FAMILY_CLASS_DECL SEMANTIC_MAKE_SIBLING_COMMON cd SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; SEMANTIC_MAKE_FAMILY_CLASSLIST fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; funcDef SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; funcHead funcBody ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; type id idsrid ( fParams ) funcBody ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int id idsrid ( fParams ) funcBody ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int id idsrid ( fParams ) funcBody ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility idsrid ( fParams ) funcBody ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr SEMANTIC_MAKE_FAMILY_SR_ID id ( fParams ) funcBody ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr SEMANTIC_MAKE_FAMILY_SR_ID id ( fParams ) funcBody ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( fParams ) funcBody ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( fParams ) funcBody ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( type id ar SEMANTIC_MAKE_FAMILY_DIM_LIST SEMANTIC_MAKE_FAMILY_FPARAM fpTail SEMANTIC_MAKE_FAMILY_FPARAM_LIST ) funcBody ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int id ar SEMANTIC_MAKE_FAMILY_DIM_LIST SEMANTIC_MAKE_FAMILY_FPARAM fpTail SEMANTIC_MAKE_FAMILY_FPARAM_LIST ) funcBody ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int id ar SEMANTIC_MAKE_FAMILY_DIM_LIST SEMANTIC_MAKE_FAMILY_FPARAM fpTail SEMANTIC_MAKE_FAMILY_FPARAM_LIST ) funcBody ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array ar SEMANTIC_MAKE_FAMILY_DIM_LIST SEMANTIC_MAKE_FAMILY_FPARAM fpTail SEMANTIC_MAKE_FAMILY_FPARAM_LIST ) funcBody ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array arraySize SEMANTIC_MAKE_SIBLING_AR ar SEMANTIC_MAKE_FAMILY_DIM_LIST SEMANTIC_MAKE_FAMILY_FPARAM fpTail SEMANTIC_MAKE_FAMILY_FPARAM_LIST ) funcBody ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ integer ] SEMANTIC_MAKE_SIBLING_AR ar SEMANTIC_MAKE_FAMILY_DIM_LIST SEMANTIC_MAKE_FAMILY_FPARAM fpTail SEMANTIC_MAKE_FAMILY_FPARAM_LIST ) funcBody ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ integer ] SEMANTIC_MAKE_SIBLING_AR ar SEMANTIC_MAKE_FAMILY_DIM_LIST SEMANTIC_MAKE_FAMILY_FPARAM fpTail SEMANTIC_MAKE_FAMILY_FPARAM_LIST ) funcBody ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] SEMANTIC_MAKE_SIBLING_AR ar SEMANTIC_MAKE_FAMILY_DIM_LIST SEMANTIC_MAKE_FAMILY_FPARAM fpTail SEMANTIC_MAKE_FAMILY_FPARAM_LIST ) funcBody ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] SEMANTIC_MAKE_SIBLING_AR ar SEMANTIC_MAKE_FAMILY_DIM_LIST SEMANTIC_MAKE_FAMILY_FPARAM fpTail SEMANTIC_MAKE_FAMILY_FPARAM_LIST ) funcBody ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] SEMANTIC_MAKE_FAMILY_DIM_LIST SEMANTIC_MAKE_FAMILY_FPARAM fpTail SEMANTIC_MAKE_FAMILY_FPARAM_LIST ) funcBody ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] SEMANTIC_MAKE_FAMILY_FPARAM_LIST ) funcBody ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) funcBody ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { VDST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { VDST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int id ar SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL VDST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int id ar SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL VDST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ar SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL VDST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL VDST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL VDST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int id ar SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL VDST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int id ar SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL VDST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ar SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL VDST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL VDST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL VDST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; id VDSTPrime } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue VDSTPrime } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue variableTail SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue SEMANTIC_MAKE_FAMILY_INDEX_LIST SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue SEMANTIC_MAKE_FAMILY_VAR SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = expr ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = expr ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = arithExpr exprTail SEMANTIC_MAKE_FAMILY_EXPR ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = term arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = factor termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = factorTemp SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = id factorPrime SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array factorPrime SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array indice SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ arithExpr ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ arithExpr ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ term arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ factor termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ integer SEMANTIC_MAKE_FAMILY_FACTOR_NUM termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 SEMANTIC_MAKE_FAMILY_FACTOR_NUM termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] SEMANTIC_MAKE_FAMILY_INDEX_LIST SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] SEMANTIC_MAKE_FAMILY_VAR SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] SEMANTIC_MAKE_FAMILY_EXPR ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; statement SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; forBlock SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( type id assignOp expr ; relExpr ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( type id assignOp expr ; relExpr ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( type id assignOp expr ; relExpr ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int id assignOp expr ; relExpr ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int id assignOp expr ; relExpr ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx assignOp expr ; relExpr ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = expr ; relExpr ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = expr ; relExpr ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = arithExpr exprTail SEMANTIC_MAKE_FAMILY_EXPR ; relExpr ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = term arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ; relExpr ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = factor termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ; relExpr ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = integer SEMANTIC_MAKE_FAMILY_FACTOR_NUM termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ; relExpr ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 SEMANTIC_MAKE_FAMILY_FACTOR_NUM termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ; relExpr ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ; relExpr ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ; relExpr ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 SEMANTIC_MAKE_FAMILY_EXPR ; relExpr ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; relExpr ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; arithExpr relOp arithExpr SEMANTIC_MAKE_FAMILY_REL_EXPR ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; term arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL relOp arithExpr SEMANTIC_MAKE_FAMILY_REL_EXPR ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; factor termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL relOp arithExpr SEMANTIC_MAKE_FAMILY_REL_EXPR ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; factorTemp SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL relOp arithExpr SEMANTIC_MAKE_FAMILY_REL_EXPR ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; id factorPrime SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL relOp arithExpr SEMANTIC_MAKE_FAMILY_REL_EXPR ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx factorPrime SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL relOp arithExpr SEMANTIC_MAKE_FAMILY_REL_EXPR ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL relOp arithExpr SEMANTIC_MAKE_FAMILY_REL_EXPR ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx SEMANTIC_MAKE_FAMILY_INDEX_LIST SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL relOp arithExpr SEMANTIC_MAKE_FAMILY_REL_EXPR ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx SEMANTIC_MAKE_FAMILY_VAR SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL relOp arithExpr SEMANTIC_MAKE_FAMILY_REL_EXPR ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL relOp arithExpr SEMANTIC_MAKE_FAMILY_REL_EXPR ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL relOp arithExpr SEMANTIC_MAKE_FAMILY_REL_EXPR ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt arithExpr SEMANTIC_MAKE_FAMILY_REL_EXPR ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt arithExpr SEMANTIC_MAKE_FAMILY_REL_EXPR ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt term arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL SEMANTIC_MAKE_FAMILY_REL_EXPR ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt factor termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL SEMANTIC_MAKE_FAMILY_REL_EXPR ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt integer SEMANTIC_MAKE_FAMILY_FACTOR_NUM termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL SEMANTIC_MAKE_FAMILY_REL_EXPR ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 SEMANTIC_MAKE_FAMILY_FACTOR_NUM termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL SEMANTIC_MAKE_FAMILY_REL_EXPR ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL SEMANTIC_MAKE_FAMILY_REL_EXPR ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL SEMANTIC_MAKE_FAMILY_REL_EXPR ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; variable SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; id variableTail SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx variableTail SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx SEMANTIC_MAKE_FAMILY_INDEX_LIST SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx SEMANTIC_MAKE_FAMILY_VAR SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = arithExpr exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = term arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = factor termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = factorTemp SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = id factorPrime SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx factorPrime SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx SEMANTIC_MAKE_FAMILY_INDEX_LIST SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx SEMANTIC_MAKE_FAMILY_VAR SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx addOp term SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - term SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - term SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - factor termTail SEMANTIC_MAKE_FAMILY_TERM SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - integer SEMANTIC_MAKE_FAMILY_FACTOR_NUM termTail SEMANTIC_MAKE_FAMILY_TERM SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 SEMANTIC_MAKE_FAMILY_FACTOR_NUM termTail SEMANTIC_MAKE_FAMILY_TERM SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 SEMANTIC_MAKE_FAMILY_TERM SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { statement SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( expr ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( expr ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( expr ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( arithExpr exprTail SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( term arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( factor termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( factorTemp SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( id factorPrime SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array factorPrime SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array indice SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ arithExpr ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ arithExpr ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ term arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ factor termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ factorTemp SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ id factorPrime SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx factorPrime SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx SEMANTIC_MAKE_FAMILY_INDEX_LIST SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx SEMANTIC_MAKE_FAMILY_VAR SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] SEMANTIC_MAKE_FAMILY_INDEX_LIST SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] SEMANTIC_MAKE_FAMILY_VAR SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] relOp arithExpr SEMANTIC_MAKE_FAMILY_REL_EXPR SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt arithExpr SEMANTIC_MAKE_FAMILY_REL_EXPR SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt arithExpr SEMANTIC_MAKE_FAMILY_REL_EXPR SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt term arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL SEMANTIC_MAKE_FAMILY_REL_EXPR SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt factor termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL SEMANTIC_MAKE_FAMILY_REL_EXPR SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt factorTemp SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL SEMANTIC_MAKE_FAMILY_REL_EXPR SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt id factorPrime SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL SEMANTIC_MAKE_FAMILY_REL_EXPR SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue factorPrime SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL SEMANTIC_MAKE_FAMILY_REL_EXPR SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL SEMANTIC_MAKE_FAMILY_REL_EXPR SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue SEMANTIC_MAKE_FAMILY_INDEX_LIST SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL SEMANTIC_MAKE_FAMILY_REL_EXPR SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue SEMANTIC_MAKE_FAMILY_VAR SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL SEMANTIC_MAKE_FAMILY_REL_EXPR SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL SEMANTIC_MAKE_FAMILY_REL_EXPR SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL SEMANTIC_MAKE_FAMILY_REL_EXPR SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { statement SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { assignStat ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { variable SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { id variableTail SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue variableTail SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue SEMANTIC_MAKE_FAMILY_INDEX_LIST SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue SEMANTIC_MAKE_FAMILY_VAR SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = arithExpr exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = term arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = factor termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = factorTemp SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = id factorPrime SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array factorPrime SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array indice SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ arithExpr ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ arithExpr ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ term arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ factor termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ factorTemp SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ id factorPrime SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx factorPrime SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx SEMANTIC_MAKE_FAMILY_INDEX_LIST SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx SEMANTIC_MAKE_FAMILY_VAR SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] SEMANTIC_MAKE_FAMILY_INDEX_LIST SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] SEMANTIC_MAKE_FAMILY_VAR SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; SEMANTIC_MAKE_FAMILY_ST_BLOCK } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { SEMANTIC_MAKE_FAMILY_ST_BLOCK } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; SEMANTIC_MAKE_FAMILY_ST_BLOCK } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; statement SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( expr ) ; SEMANTIC_MAKE_FAMILY_RETURN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( expr ) ; SEMANTIC_MAKE_FAMILY_RETURN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( expr ) ; SEMANTIC_MAKE_FAMILY_RETURN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( arithExpr exprTail SEMANTIC_MAKE_FAMILY_EXPR ) ; SEMANTIC_MAKE_FAMILY_RETURN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( term arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) ; SEMANTIC_MAKE_FAMILY_RETURN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( factor termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) ; SEMANTIC_MAKE_FAMILY_RETURN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( factorTemp SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) ; SEMANTIC_MAKE_FAMILY_RETURN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( id factorPrime SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) ; SEMANTIC_MAKE_FAMILY_RETURN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue factorPrime SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) ; SEMANTIC_MAKE_FAMILY_RETURN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) ; SEMANTIC_MAKE_FAMILY_RETURN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue SEMANTIC_MAKE_FAMILY_INDEX_LIST SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) ; SEMANTIC_MAKE_FAMILY_RETURN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue SEMANTIC_MAKE_FAMILY_VAR SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) ; SEMANTIC_MAKE_FAMILY_RETURN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) ; SEMANTIC_MAKE_FAMILY_RETURN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) ; SEMANTIC_MAKE_FAMILY_RETURN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue SEMANTIC_MAKE_FAMILY_EXPR ) ; SEMANTIC_MAKE_FAMILY_RETURN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; SEMANTIC_MAKE_FAMILY_RETURN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; SEMANTIC_MAKE_FAMILY_RETURN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; SEMANTIC_MAKE_FAMILY_ST_BLOCK } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; funcDef SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; funcHead funcBody ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; type id idsrid ( fParams ) funcBody ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int id idsrid ( fParams ) funcBody ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int id idsrid ( fParams ) funcBody ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility idsrid ( fParams ) funcBody ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr SEMANTIC_MAKE_FAMILY_SR_ID id ( fParams ) funcBody ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr SEMANTIC_MAKE_FAMILY_SR_ID id ( fParams ) funcBody ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( fParams ) funcBody ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( fParams ) funcBody ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( type id ar SEMANTIC_MAKE_FAMILY_DIM_LIST SEMANTIC_MAKE_FAMILY_FPARAM fpTail SEMANTIC_MAKE_FAMILY_FPARAM_LIST ) funcBody ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int id ar SEMANTIC_MAKE_FAMILY_DIM_LIST SEMANTIC_MAKE_FAMILY_FPARAM fpTail SEMANTIC_MAKE_FAMILY_FPARAM_LIST ) funcBody ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int id ar SEMANTIC_MAKE_FAMILY_DIM_LIST SEMANTIC_MAKE_FAMILY_FPARAM fpTail SEMANTIC_MAKE_FAMILY_FPARAM_LIST ) funcBody ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array ar SEMANTIC_MAKE_FAMILY_DIM_LIST SEMANTIC_MAKE_FAMILY_FPARAM fpTail SEMANTIC_MAKE_FAMILY_FPARAM_LIST ) funcBody ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array arraySize SEMANTIC_MAKE_SIBLING_AR ar SEMANTIC_MAKE_FAMILY_DIM_LIST SEMANTIC_MAKE_FAMILY_FPARAM fpTail SEMANTIC_MAKE_FAMILY_FPARAM_LIST ) funcBody ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ integer ] SEMANTIC_MAKE_SIBLING_AR ar SEMANTIC_MAKE_FAMILY_DIM_LIST SEMANTIC_MAKE_FAMILY_FPARAM fpTail SEMANTIC_MAKE_FAMILY_FPARAM_LIST ) funcBody ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ integer ] SEMANTIC_MAKE_SIBLING_AR ar SEMANTIC_MAKE_FAMILY_DIM_LIST SEMANTIC_MAKE_FAMILY_FPARAM fpTail SEMANTIC_MAKE_FAMILY_FPARAM_LIST ) funcBody ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] SEMANTIC_MAKE_SIBLING_AR ar SEMANTIC_MAKE_FAMILY_DIM_LIST SEMANTIC_MAKE_FAMILY_FPARAM fpTail SEMANTIC_MAKE_FAMILY_FPARAM_LIST ) funcBody ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] SEMANTIC_MAKE_SIBLING_AR ar SEMANTIC_MAKE_FAMILY_DIM_LIST SEMANTIC_MAKE_FAMILY_FPARAM fpTail SEMANTIC_MAKE_FAMILY_FPARAM_LIST ) funcBody ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] SEMANTIC_MAKE_FAMILY_DIM_LIST SEMANTIC_MAKE_FAMILY_FPARAM fpTail SEMANTIC_MAKE_FAMILY_FPARAM_LIST ) funcBody ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] SEMANTIC_MAKE_FAMILY_FPARAM_LIST ) funcBody ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) funcBody ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { VDST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { VDST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int id ar SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL VDST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int id ar SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL VDST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ar SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL VDST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL VDST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL VDST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int id ar SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL VDST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int id ar SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL VDST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ar SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL VDST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL VDST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL VDST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; id VDSTPrime } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue VDSTPrime } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue variableTail SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue SEMANTIC_MAKE_FAMILY_INDEX_LIST SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue SEMANTIC_MAKE_FAMILY_VAR SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = expr ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = expr ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = arithExpr exprTail SEMANTIC_MAKE_FAMILY_EXPR ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = term arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = factor termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = factorTemp SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = id factorPrime SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array factorPrime SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array indice SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ arithExpr ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ arithExpr ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ term arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ factor termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ integer SEMANTIC_MAKE_FAMILY_FACTOR_NUM termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 SEMANTIC_MAKE_FAMILY_FACTOR_NUM termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] SEMANTIC_MAKE_FAMILY_INDEX_LIST SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] SEMANTIC_MAKE_FAMILY_VAR SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] SEMANTIC_MAKE_FAMILY_EXPR ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; statement SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; forBlock SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( type id assignOp expr ; relExpr ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( type id assignOp expr ; relExpr ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( type id assignOp expr ; relExpr ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int id assignOp expr ; relExpr ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int id assignOp expr ; relExpr ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx assignOp expr ; relExpr ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = expr ; relExpr ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = expr ; relExpr ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = arithExpr exprTail SEMANTIC_MAKE_FAMILY_EXPR ; relExpr ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = term arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ; relExpr ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = factor termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ; relExpr ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = integer SEMANTIC_MAKE_FAMILY_FACTOR_NUM termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ; relExpr ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 SEMANTIC_MAKE_FAMILY_FACTOR_NUM termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ; relExpr ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ; relExpr ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ; relExpr ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 SEMANTIC_MAKE_FAMILY_EXPR ; relExpr ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; relExpr ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; arithExpr relOp arithExpr SEMANTIC_MAKE_FAMILY_REL_EXPR ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; term arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL relOp arithExpr SEMANTIC_MAKE_FAMILY_REL_EXPR ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; factor termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL relOp arithExpr SEMANTIC_MAKE_FAMILY_REL_EXPR ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; factorTemp SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL relOp arithExpr SEMANTIC_MAKE_FAMILY_REL_EXPR ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; id factorPrime SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL relOp arithExpr SEMANTIC_MAKE_FAMILY_REL_EXPR ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx factorPrime SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL relOp arithExpr SEMANTIC_MAKE_FAMILY_REL_EXPR ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL relOp arithExpr SEMANTIC_MAKE_FAMILY_REL_EXPR ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx SEMANTIC_MAKE_FAMILY_INDEX_LIST SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL relOp arithExpr SEMANTIC_MAKE_FAMILY_REL_EXPR ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx SEMANTIC_MAKE_FAMILY_VAR SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL relOp arithExpr SEMANTIC_MAKE_FAMILY_REL_EXPR ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL relOp arithExpr SEMANTIC_MAKE_FAMILY_REL_EXPR ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL relOp arithExpr SEMANTIC_MAKE_FAMILY_REL_EXPR ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq arithExpr SEMANTIC_MAKE_FAMILY_REL_EXPR ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq arithExpr SEMANTIC_MAKE_FAMILY_REL_EXPR ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq term arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL SEMANTIC_MAKE_FAMILY_REL_EXPR ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq factor termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL SEMANTIC_MAKE_FAMILY_REL_EXPR ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq integer SEMANTIC_MAKE_FAMILY_FACTOR_NUM termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL SEMANTIC_MAKE_FAMILY_REL_EXPR ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 SEMANTIC_MAKE_FAMILY_FACTOR_NUM termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL SEMANTIC_MAKE_FAMILY_REL_EXPR ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL SEMANTIC_MAKE_FAMILY_REL_EXPR ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL SEMANTIC_MAKE_FAMILY_REL_EXPR ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; variable SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; id variableTail SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx variableTail SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx SEMANTIC_MAKE_FAMILY_INDEX_LIST SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx SEMANTIC_MAKE_FAMILY_VAR SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = arithExpr exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = term arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = factor termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( arithExpr ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( arithExpr ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( term arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( factor termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( factorTemp SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( id factorPrime SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx factorPrime SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx SEMANTIC_MAKE_FAMILY_INDEX_LIST SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx SEMANTIC_MAKE_FAMILY_VAR SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) addOp term SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + term SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + term SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + factor termTail SEMANTIC_MAKE_FAMILY_TERM SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + integer SEMANTIC_MAKE_FAMILY_FACTOR_NUM termTail SEMANTIC_MAKE_FAMILY_TERM SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 SEMANTIC_MAKE_FAMILY_FACTOR_NUM termTail SEMANTIC_MAKE_FAMILY_TERM SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 SEMANTIC_MAKE_FAMILY_TERM SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { statement SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( expr ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( expr ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( expr ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( arithExpr exprTail SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( term arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( factor termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( factorTemp SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( id factorPrime SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array factorPrime SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array indice SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ arithExpr ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ arithExpr ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ term arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ factor termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ factorTemp SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ id factorPrime SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx factorPrime SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx SEMANTIC_MAKE_FAMILY_INDEX_LIST SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx SEMANTIC_MAKE_FAMILY_VAR SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] SEMANTIC_MAKE_FAMILY_INDEX_LIST SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] SEMANTIC_MAKE_FAMILY_VAR SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] relOp arithExpr SEMANTIC_MAKE_FAMILY_REL_EXPR SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt arithExpr SEMANTIC_MAKE_FAMILY_REL_EXPR SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt arithExpr SEMANTIC_MAKE_FAMILY_REL_EXPR SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt term arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL SEMANTIC_MAKE_FAMILY_REL_EXPR SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt factor termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL SEMANTIC_MAKE_FAMILY_REL_EXPR SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt factorTemp SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL SEMANTIC_MAKE_FAMILY_REL_EXPR SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt id factorPrime SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL SEMANTIC_MAKE_FAMILY_REL_EXPR SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue factorPrime SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL SEMANTIC_MAKE_FAMILY_REL_EXPR SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL SEMANTIC_MAKE_FAMILY_REL_EXPR SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue SEMANTIC_MAKE_FAMILY_INDEX_LIST SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL SEMANTIC_MAKE_FAMILY_REL_EXPR SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue SEMANTIC_MAKE_FAMILY_VAR SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL SEMANTIC_MAKE_FAMILY_REL_EXPR SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL SEMANTIC_MAKE_FAMILY_REL_EXPR SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue addOp term SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL SEMANTIC_MAKE_FAMILY_REL_EXPR SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + term SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL SEMANTIC_MAKE_FAMILY_REL_EXPR SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + term SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL SEMANTIC_MAKE_FAMILY_REL_EXPR SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + factor termTail SEMANTIC_MAKE_FAMILY_TERM SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL SEMANTIC_MAKE_FAMILY_REL_EXPR SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + integer SEMANTIC_MAKE_FAMILY_FACTOR_NUM termTail SEMANTIC_MAKE_FAMILY_TERM SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL SEMANTIC_MAKE_FAMILY_REL_EXPR SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 SEMANTIC_MAKE_FAMILY_FACTOR_NUM termTail SEMANTIC_MAKE_FAMILY_TERM SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL SEMANTIC_MAKE_FAMILY_REL_EXPR SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 multOp factor SEMANTIC_MAKE_FAMILY_MULT_OP termTail SEMANTIC_MAKE_FAMILY_TERM SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL SEMANTIC_MAKE_FAMILY_REL_EXPR SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / factor SEMANTIC_MAKE_FAMILY_MULT_OP termTail SEMANTIC_MAKE_FAMILY_TERM SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL SEMANTIC_MAKE_FAMILY_REL_EXPR SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / factor SEMANTIC_MAKE_FAMILY_MULT_OP termTail SEMANTIC_MAKE_FAMILY_TERM SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL SEMANTIC_MAKE_FAMILY_REL_EXPR SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / integer SEMANTIC_MAKE_FAMILY_FACTOR_NUM SEMANTIC_MAKE_FAMILY_MULT_OP termTail SEMANTIC_MAKE_FAMILY_TERM SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL SEMANTIC_MAKE_FAMILY_REL_EXPR SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 SEMANTIC_MAKE_FAMILY_FACTOR_NUM SEMANTIC_MAKE_FAMILY_MULT_OP termTail SEMANTIC_MAKE_FAMILY_TERM SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL SEMANTIC_MAKE_FAMILY_REL_EXPR SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 SEMANTIC_MAKE_FAMILY_TERM SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL SEMANTIC_MAKE_FAMILY_REL_EXPR SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 addOp term SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL SEMANTIC_MAKE_FAMILY_REL_EXPR SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or term SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL SEMANTIC_MAKE_FAMILY_REL_EXPR SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or term SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL SEMANTIC_MAKE_FAMILY_REL_EXPR SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or factor termTail SEMANTIC_MAKE_FAMILY_TERM SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL SEMANTIC_MAKE_FAMILY_REL_EXPR SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or factorTemp SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL SEMANTIC_MAKE_FAMILY_REL_EXPR SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or id factorPrime SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL SEMANTIC_MAKE_FAMILY_REL_EXPR SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx factorPrime SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL SEMANTIC_MAKE_FAMILY_REL_EXPR SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL SEMANTIC_MAKE_FAMILY_REL_EXPR SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx SEMANTIC_MAKE_FAMILY_INDEX_LIST SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL SEMANTIC_MAKE_FAMILY_REL_EXPR SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx SEMANTIC_MAKE_FAMILY_VAR SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL SEMANTIC_MAKE_FAMILY_REL_EXPR SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx SEMANTIC_MAKE_FAMILY_TERM SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL SEMANTIC_MAKE_FAMILY_REL_EXPR SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL SEMANTIC_MAKE_FAMILY_REL_EXPR SEMANTIC_MAKE_FAMILY_EXPR ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then statBlock else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { statement SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { assignStat ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { variable SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { id variableTail SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue variableTail SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue SEMANTIC_MAKE_FAMILY_INDEX_LIST SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue SEMANTIC_MAKE_FAMILY_VAR SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = arithExpr exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = term arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = factor termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = factorTemp SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = id factorPrime SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array factorPrime SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array indice SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ arithExpr ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ arithExpr ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ term arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ factor termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ factorTemp SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ id factorPrime SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx factorPrime SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx SEMANTIC_MAKE_FAMILY_INDEX_LIST SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx SEMANTIC_MAKE_FAMILY_VAR SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] SEMANTIC_MAKE_FAMILY_INDEX_LIST SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] SEMANTIC_MAKE_FAMILY_VAR SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; SEMANTIC_MAKE_FAMILY_ST_BLOCK } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else statBlock ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { SEMANTIC_MAKE_FAMILY_ST_BLOCK } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; SEMANTIC_MAKE_FAMILY_IF_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; SEMANTIC_MAKE_FAMILY_ST_BLOCK } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; statement SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( expr ) ; SEMANTIC_MAKE_FAMILY_RETURN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( expr ) ; SEMANTIC_MAKE_FAMILY_RETURN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( expr ) ; SEMANTIC_MAKE_FAMILY_RETURN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( arithExpr exprTail SEMANTIC_MAKE_FAMILY_EXPR ) ; SEMANTIC_MAKE_FAMILY_RETURN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( term arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) ; SEMANTIC_MAKE_FAMILY_RETURN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( factor termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) ; SEMANTIC_MAKE_FAMILY_RETURN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( factorTemp SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) ; SEMANTIC_MAKE_FAMILY_RETURN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( id factorPrime SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) ; SEMANTIC_MAKE_FAMILY_RETURN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue factorPrime SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) ; SEMANTIC_MAKE_FAMILY_RETURN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) ; SEMANTIC_MAKE_FAMILY_RETURN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue SEMANTIC_MAKE_FAMILY_INDEX_LIST SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) ; SEMANTIC_MAKE_FAMILY_RETURN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue SEMANTIC_MAKE_FAMILY_VAR SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) ; SEMANTIC_MAKE_FAMILY_RETURN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) ; SEMANTIC_MAKE_FAMILY_RETURN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) ; SEMANTIC_MAKE_FAMILY_RETURN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue SEMANTIC_MAKE_FAMILY_EXPR ) ; SEMANTIC_MAKE_FAMILY_RETURN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; SEMANTIC_MAKE_FAMILY_RETURN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; SEMANTIC_MAKE_FAMILY_RETURN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; SEMANTIC_MAKE_FAMILY_ST_BLOCK } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; funcDef SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; funcHead funcBody ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; type id idsrid ( fParams ) funcBody ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float id idsrid ( fParams ) funcBody ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float id idsrid ( fParams ) funcBody ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize idsrid ( fParams ) funcBody ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( fParams ) funcBody ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( fParams ) funcBody ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) funcBody ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) funcBody ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { VDST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { VDST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float id ar SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL VDST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float id ar SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL VDST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ar SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL VDST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL VDST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL VDST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; id VDSTPrime } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value VDSTPrime } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value variableTail SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value SEMANTIC_MAKE_FAMILY_INDEX_LIST SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value SEMANTIC_MAKE_FAMILY_VAR SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = expr ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = expr ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = arithExpr exprTail SEMANTIC_MAKE_FAMILY_EXPR ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = term arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = factor termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = integer SEMANTIC_MAKE_FAMILY_FACTOR_NUM termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 SEMANTIC_MAKE_FAMILY_FACTOR_NUM termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 multOp factor SEMANTIC_MAKE_FAMILY_MULT_OP termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * factor SEMANTIC_MAKE_FAMILY_MULT_OP termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * factor SEMANTIC_MAKE_FAMILY_MULT_OP termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( arithExpr ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR SEMANTIC_MAKE_FAMILY_MULT_OP termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( arithExpr ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR SEMANTIC_MAKE_FAMILY_MULT_OP termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( term arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR SEMANTIC_MAKE_FAMILY_MULT_OP termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( factor termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR SEMANTIC_MAKE_FAMILY_MULT_OP termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( integer SEMANTIC_MAKE_FAMILY_FACTOR_NUM termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR SEMANTIC_MAKE_FAMILY_MULT_OP termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 SEMANTIC_MAKE_FAMILY_FACTOR_NUM termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR SEMANTIC_MAKE_FAMILY_MULT_OP termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR SEMANTIC_MAKE_FAMILY_MULT_OP termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 addOp term SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR SEMANTIC_MAKE_FAMILY_MULT_OP termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + term SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR SEMANTIC_MAKE_FAMILY_MULT_OP termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + term SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR SEMANTIC_MAKE_FAMILY_MULT_OP termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + factor termTail SEMANTIC_MAKE_FAMILY_TERM SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR SEMANTIC_MAKE_FAMILY_MULT_OP termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + float SEMANTIC_MAKE_FAMILY_FACTOR_NUM termTail SEMANTIC_MAKE_FAMILY_TERM SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR SEMANTIC_MAKE_FAMILY_MULT_OP termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 SEMANTIC_MAKE_FAMILY_FACTOR_NUM termTail SEMANTIC_MAKE_FAMILY_TERM SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR SEMANTIC_MAKE_FAMILY_MULT_OP termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 multOp factor SEMANTIC_MAKE_FAMILY_MULT_OP termTail SEMANTIC_MAKE_FAMILY_TERM SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR SEMANTIC_MAKE_FAMILY_MULT_OP termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / factor SEMANTIC_MAKE_FAMILY_MULT_OP termTail SEMANTIC_MAKE_FAMILY_TERM SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR SEMANTIC_MAKE_FAMILY_MULT_OP termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / factor SEMANTIC_MAKE_FAMILY_MULT_OP termTail SEMANTIC_MAKE_FAMILY_TERM SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR SEMANTIC_MAKE_FAMILY_MULT_OP termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / float SEMANTIC_MAKE_FAMILY_FACTOR_NUM SEMANTIC_MAKE_FAMILY_MULT_OP termTail SEMANTIC_MAKE_FAMILY_TERM SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR SEMANTIC_MAKE_FAMILY_MULT_OP termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 SEMANTIC_MAKE_FAMILY_FACTOR_NUM SEMANTIC_MAKE_FAMILY_MULT_OP termTail SEMANTIC_MAKE_FAMILY_TERM SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR SEMANTIC_MAKE_FAMILY_MULT_OP termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 SEMANTIC_MAKE_FAMILY_TERM SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR SEMANTIC_MAKE_FAMILY_MULT_OP termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR SEMANTIC_MAKE_FAMILY_MULT_OP termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR SEMANTIC_MAKE_FAMILY_MULT_OP termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) SEMANTIC_MAKE_FAMILY_EXPR ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; SEMANTIC_MAKE_FAMILY_ASSIGN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; statement SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; assignStat ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; variable SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; id variableTail SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value variableTail SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value SEMANTIC_MAKE_FAMILY_INDEX_LIST SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value SEMANTIC_MAKE_FAMILY_VAR SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = arithExpr exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = term arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = factor termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = float SEMANTIC_MAKE_FAMILY_FACTOR_NUM termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 SEMANTIC_MAKE_FAMILY_FACTOR_NUM termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 addOp term SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + term SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + term SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + factor termTail SEMANTIC_MAKE_FAMILY_TERM SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( arithExpr ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR termTail SEMANTIC_MAKE_FAMILY_TERM SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( arithExpr ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR termTail SEMANTIC_MAKE_FAMILY_TERM SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( term arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR termTail SEMANTIC_MAKE_FAMILY_TERM SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( factor termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR termTail SEMANTIC_MAKE_FAMILY_TERM SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( arithExpr ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR termTail SEMANTIC_MAKE_FAMILY_TERM SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( arithExpr ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR termTail SEMANTIC_MAKE_FAMILY_TERM SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( term arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR termTail SEMANTIC_MAKE_FAMILY_TERM SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( factor termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR termTail SEMANTIC_MAKE_FAMILY_TERM SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( float SEMANTIC_MAKE_FAMILY_FACTOR_NUM termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR termTail SEMANTIC_MAKE_FAMILY_TERM SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 SEMANTIC_MAKE_FAMILY_FACTOR_NUM termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR termTail SEMANTIC_MAKE_FAMILY_TERM SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 multOp factor SEMANTIC_MAKE_FAMILY_MULT_OP termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR termTail SEMANTIC_MAKE_FAMILY_TERM SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * factor SEMANTIC_MAKE_FAMILY_MULT_OP termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR termTail SEMANTIC_MAKE_FAMILY_TERM SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * factor SEMANTIC_MAKE_FAMILY_MULT_OP termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR termTail SEMANTIC_MAKE_FAMILY_TERM SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * float SEMANTIC_MAKE_FAMILY_FACTOR_NUM SEMANTIC_MAKE_FAMILY_MULT_OP termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR termTail SEMANTIC_MAKE_FAMILY_TERM SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 SEMANTIC_MAKE_FAMILY_FACTOR_NUM SEMANTIC_MAKE_FAMILY_MULT_OP termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR termTail SEMANTIC_MAKE_FAMILY_TERM SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR termTail SEMANTIC_MAKE_FAMILY_TERM SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR termTail SEMANTIC_MAKE_FAMILY_TERM SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR termTail SEMANTIC_MAKE_FAMILY_TERM SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR termTail SEMANTIC_MAKE_FAMILY_TERM SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) addOp term SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR termTail SEMANTIC_MAKE_FAMILY_TERM SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - term SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR termTail SEMANTIC_MAKE_FAMILY_TERM SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - term SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR termTail SEMANTIC_MAKE_FAMILY_TERM SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - factor termTail SEMANTIC_MAKE_FAMILY_TERM SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR termTail SEMANTIC_MAKE_FAMILY_TERM SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - float SEMANTIC_MAKE_FAMILY_FACTOR_NUM termTail SEMANTIC_MAKE_FAMILY_TERM SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR termTail SEMANTIC_MAKE_FAMILY_TERM SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 SEMANTIC_MAKE_FAMILY_FACTOR_NUM termTail SEMANTIC_MAKE_FAMILY_TERM SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR termTail SEMANTIC_MAKE_FAMILY_TERM SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 SEMANTIC_MAKE_FAMILY_TERM SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR termTail SEMANTIC_MAKE_FAMILY_TERM SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR termTail SEMANTIC_MAKE_FAMILY_TERM SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR termTail SEMANTIC_MAKE_FAMILY_TERM SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) SEMANTIC_MAKE_FAMILY_TERM SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) addOp term SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + term SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + term SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + factor termTail SEMANTIC_MAKE_FAMILY_TERM SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + float SEMANTIC_MAKE_FAMILY_FACTOR_NUM termTail SEMANTIC_MAKE_FAMILY_TERM SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 SEMANTIC_MAKE_FAMILY_FACTOR_NUM termTail SEMANTIC_MAKE_FAMILY_TERM SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 SEMANTIC_MAKE_FAMILY_TERM SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 relOp arithExpr SEMANTIC_MAKE_FAMILY_REL_EXPR SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt arithExpr SEMANTIC_MAKE_FAMILY_REL_EXPR SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt arithExpr SEMANTIC_MAKE_FAMILY_REL_EXPR SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt term arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL SEMANTIC_MAKE_FAMILY_REL_EXPR SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt factor termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL SEMANTIC_MAKE_FAMILY_REL_EXPR SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt integer SEMANTIC_MAKE_FAMILY_FACTOR_NUM termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL SEMANTIC_MAKE_FAMILY_REL_EXPR SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 SEMANTIC_MAKE_FAMILY_FACTOR_NUM termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL SEMANTIC_MAKE_FAMILY_REL_EXPR SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 multOp factor SEMANTIC_MAKE_FAMILY_MULT_OP termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL SEMANTIC_MAKE_FAMILY_REL_EXPR SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and factor SEMANTIC_MAKE_FAMILY_MULT_OP termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL SEMANTIC_MAKE_FAMILY_REL_EXPR SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and factor SEMANTIC_MAKE_FAMILY_MULT_OP termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL SEMANTIC_MAKE_FAMILY_REL_EXPR SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not factor SEMANTIC_MAKE_FAMILY_FACTOR_NOT SEMANTIC_MAKE_FAMILY_MULT_OP termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL SEMANTIC_MAKE_FAMILY_REL_EXPR SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not factor SEMANTIC_MAKE_FAMILY_FACTOR_NOT SEMANTIC_MAKE_FAMILY_MULT_OP termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL SEMANTIC_MAKE_FAMILY_REL_EXPR SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not sign factor SEMANTIC_MAKE_FAMILY_FACTOR_SIGN SEMANTIC_MAKE_FAMILY_FACTOR_NOT SEMANTIC_MAKE_FAMILY_MULT_OP termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL SEMANTIC_MAKE_FAMILY_REL_EXPR SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - factor SEMANTIC_MAKE_FAMILY_FACTOR_SIGN SEMANTIC_MAKE_FAMILY_FACTOR_NOT SEMANTIC_MAKE_FAMILY_MULT_OP termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL SEMANTIC_MAKE_FAMILY_REL_EXPR SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - factor SEMANTIC_MAKE_FAMILY_FACTOR_SIGN SEMANTIC_MAKE_FAMILY_FACTOR_NOT SEMANTIC_MAKE_FAMILY_MULT_OP termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL SEMANTIC_MAKE_FAMILY_REL_EXPR SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - integer SEMANTIC_MAKE_FAMILY_FACTOR_NUM SEMANTIC_MAKE_FAMILY_FACTOR_SIGN SEMANTIC_MAKE_FAMILY_FACTOR_NOT SEMANTIC_MAKE_FAMILY_MULT_OP termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL SEMANTIC_MAKE_FAMILY_REL_EXPR SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 SEMANTIC_MAKE_FAMILY_FACTOR_NUM SEMANTIC_MAKE_FAMILY_FACTOR_SIGN SEMANTIC_MAKE_FAMILY_FACTOR_NOT SEMANTIC_MAKE_FAMILY_MULT_OP termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL SEMANTIC_MAKE_FAMILY_REL_EXPR SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL SEMANTIC_MAKE_FAMILY_REL_EXPR SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL SEMANTIC_MAKE_FAMILY_REL_EXPR SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; statement SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( expr ) ; SEMANTIC_MAKE_FAMILY_RETURN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( expr ) ; SEMANTIC_MAKE_FAMILY_RETURN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( expr ) ; SEMANTIC_MAKE_FAMILY_RETURN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( arithExpr exprTail SEMANTIC_MAKE_FAMILY_EXPR ) ; SEMANTIC_MAKE_FAMILY_RETURN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( term arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) ; SEMANTIC_MAKE_FAMILY_RETURN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( factor termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) ; SEMANTIC_MAKE_FAMILY_RETURN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( factorTemp SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) ; SEMANTIC_MAKE_FAMILY_RETURN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( id factorPrime SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) ; SEMANTIC_MAKE_FAMILY_RETURN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value factorPrime SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) ; SEMANTIC_MAKE_FAMILY_RETURN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) ; SEMANTIC_MAKE_FAMILY_RETURN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value SEMANTIC_MAKE_FAMILY_INDEX_LIST SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) ; SEMANTIC_MAKE_FAMILY_RETURN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value SEMANTIC_MAKE_FAMILY_VAR SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) ; SEMANTIC_MAKE_FAMILY_RETURN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) ; SEMANTIC_MAKE_FAMILY_RETURN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) ; SEMANTIC_MAKE_FAMILY_RETURN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value SEMANTIC_MAKE_FAMILY_EXPR ) ; SEMANTIC_MAKE_FAMILY_RETURN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; SEMANTIC_MAKE_FAMILY_RETURN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; SEMANTIC_MAKE_FAMILY_RETURN_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; SEMANTIC_MAKE_FAMILY_ST_BLOCK } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; SEMANTIC_MAKE_FAMILY_FUNC_DEF SEMANTIC_MAKE_SIBLING_COMMON fd SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; SEMANTIC_MAKE_FAMILY_FUNCTION_LIST program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program funcBody ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { VDST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { VDST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int id ar SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL VDST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int id ar SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL VDST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample ar SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL VDST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample arraySize SEMANTIC_MAKE_SIBLING_AR ar SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL VDST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ integer ] SEMANTIC_MAKE_SIBLING_AR ar SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL VDST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ integer ] SEMANTIC_MAKE_SIBLING_AR ar SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL VDST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] SEMANTIC_MAKE_SIBLING_AR ar SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL VDST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] SEMANTIC_MAKE_SIBLING_AR ar SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL VDST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL VDST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL VDST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int id ar SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL VDST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int id ar SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL VDST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ar SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL VDST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL VDST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL VDST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int id ar SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL VDST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int id ar SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL VDST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ar SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL VDST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL VDST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL VDST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int id ar SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL VDST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int id ar SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL VDST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ar SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL VDST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL VDST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL VDST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; id VDSTPrime } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility VDSTPrime } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility id ar SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL VDST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ar SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL VDST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL VDST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL VDST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; id VDSTPrime } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility VDSTPrime } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility id ar SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL VDST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility ar SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL VDST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility arraySize SEMANTIC_MAKE_SIBLING_AR ar SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL VDST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ integer ] SEMANTIC_MAKE_SIBLING_AR ar SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL VDST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ integer ] SEMANTIC_MAKE_SIBLING_AR ar SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL VDST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] SEMANTIC_MAKE_SIBLING_AR ar SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL VDST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] SEMANTIC_MAKE_SIBLING_AR ar SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL VDST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] arraySize SEMANTIC_MAKE_SIBLING_AR ar SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL VDST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ integer ] SEMANTIC_MAKE_SIBLING_AR ar SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL VDST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ integer ] SEMANTIC_MAKE_SIBLING_AR ar SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL VDST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] SEMANTIC_MAKE_SIBLING_AR ar SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL VDST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] SEMANTIC_MAKE_SIBLING_AR ar SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL VDST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] arraySize SEMANTIC_MAKE_SIBLING_AR ar SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL VDST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ integer ] SEMANTIC_MAKE_SIBLING_AR ar SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL VDST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ integer ] SEMANTIC_MAKE_SIBLING_AR ar SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL VDST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] SEMANTIC_MAKE_SIBLING_AR ar SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL VDST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] SEMANTIC_MAKE_SIBLING_AR ar SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL VDST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] arraySize SEMANTIC_MAKE_SIBLING_AR ar SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL VDST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ integer ] SEMANTIC_MAKE_SIBLING_AR ar SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL VDST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ integer ] SEMANTIC_MAKE_SIBLING_AR ar SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL VDST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] SEMANTIC_MAKE_SIBLING_AR ar SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL VDST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] SEMANTIC_MAKE_SIBLING_AR ar SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL VDST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] SEMANTIC_MAKE_FAMILY_DIM_LIST ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL VDST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; SEMANTIC_MAKE_FAMILY_VAR_DECL SEMANTIC_MAKE_SIBLING_VAR_DECL VDST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; statementPrime ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; forBlock SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( type id assignOp expr ; relExpr ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( type id assignOp expr ; relExpr ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( type id assignOp expr ; relExpr ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int id assignOp expr ; relExpr ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int id assignOp expr ; relExpr ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t assignOp expr ; relExpr ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = expr ; relExpr ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = expr ; relExpr ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = arithExpr exprTail SEMANTIC_MAKE_FAMILY_EXPR ; relExpr ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = term arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ; relExpr ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = factor termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ; relExpr ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = integer SEMANTIC_MAKE_FAMILY_FACTOR_NUM termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ; relExpr ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 SEMANTIC_MAKE_FAMILY_FACTOR_NUM termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ; relExpr ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ; relExpr ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ; relExpr ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 SEMANTIC_MAKE_FAMILY_EXPR ; relExpr ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; relExpr ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; arithExpr relOp arithExpr SEMANTIC_MAKE_FAMILY_REL_EXPR ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; term arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL relOp arithExpr SEMANTIC_MAKE_FAMILY_REL_EXPR ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; factor termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL relOp arithExpr SEMANTIC_MAKE_FAMILY_REL_EXPR ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; factorTemp SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL relOp arithExpr SEMANTIC_MAKE_FAMILY_REL_EXPR ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; id factorPrime SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL relOp arithExpr SEMANTIC_MAKE_FAMILY_REL_EXPR ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t factorPrime SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL relOp arithExpr SEMANTIC_MAKE_FAMILY_REL_EXPR ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL relOp arithExpr SEMANTIC_MAKE_FAMILY_REL_EXPR ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t SEMANTIC_MAKE_FAMILY_INDEX_LIST SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL relOp arithExpr SEMANTIC_MAKE_FAMILY_REL_EXPR ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t SEMANTIC_MAKE_FAMILY_VAR SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL relOp arithExpr SEMANTIC_MAKE_FAMILY_REL_EXPR ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL relOp arithExpr SEMANTIC_MAKE_FAMILY_REL_EXPR ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL relOp arithExpr SEMANTIC_MAKE_FAMILY_REL_EXPR ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq arithExpr SEMANTIC_MAKE_FAMILY_REL_EXPR ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq arithExpr SEMANTIC_MAKE_FAMILY_REL_EXPR ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq term arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL SEMANTIC_MAKE_FAMILY_REL_EXPR ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq factor termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL SEMANTIC_MAKE_FAMILY_REL_EXPR ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq integer SEMANTIC_MAKE_FAMILY_FACTOR_NUM termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL SEMANTIC_MAKE_FAMILY_REL_EXPR ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 SEMANTIC_MAKE_FAMILY_FACTOR_NUM termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL SEMANTIC_MAKE_FAMILY_REL_EXPR ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL SEMANTIC_MAKE_FAMILY_REL_EXPR ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL SEMANTIC_MAKE_FAMILY_REL_EXPR ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; assignStat ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; variable SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; id variableTail SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t variableTail SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t SEMANTIC_MAKE_FAMILY_INDEX_LIST SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t SEMANTIC_MAKE_FAMILY_VAR SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = arithExpr exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = term arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = factor termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = factorTemp SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = id factorPrime SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t factorPrime SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t SEMANTIC_MAKE_FAMILY_INDEX_LIST SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t SEMANTIC_MAKE_FAMILY_VAR SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t addOp term SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + term SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + term SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + factor termTail SEMANTIC_MAKE_FAMILY_TERM SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + integer SEMANTIC_MAKE_FAMILY_FACTOR_NUM termTail SEMANTIC_MAKE_FAMILY_TERM SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 SEMANTIC_MAKE_FAMILY_FACTOR_NUM termTail SEMANTIC_MAKE_FAMILY_TERM SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 SEMANTIC_MAKE_FAMILY_TERM SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) statBlock ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { statement SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( variable ) ; SEMANTIC_MAKE_FAMILY_GET_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( variable ) ; SEMANTIC_MAKE_FAMILY_GET_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( variable ) ; SEMANTIC_MAKE_FAMILY_GET_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( id variableTail ) ; SEMANTIC_MAKE_FAMILY_GET_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample variableTail ) ; SEMANTIC_MAKE_FAMILY_GET_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime ) ; SEMANTIC_MAKE_FAMILY_GET_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample indice SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime ) ; SEMANTIC_MAKE_FAMILY_GET_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ arithExpr ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime ) ; SEMANTIC_MAKE_FAMILY_GET_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ arithExpr ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime ) ; SEMANTIC_MAKE_FAMILY_GET_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ term arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime ) ; SEMANTIC_MAKE_FAMILY_GET_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ factor termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime ) ; SEMANTIC_MAKE_FAMILY_GET_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ factorTemp SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime ) ; SEMANTIC_MAKE_FAMILY_GET_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ id factorPrime SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime ) ; SEMANTIC_MAKE_FAMILY_GET_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t factorPrime SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime ) ; SEMANTIC_MAKE_FAMILY_GET_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime ) ; SEMANTIC_MAKE_FAMILY_GET_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t SEMANTIC_MAKE_FAMILY_INDEX_LIST SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime ) ; SEMANTIC_MAKE_FAMILY_GET_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t SEMANTIC_MAKE_FAMILY_VAR SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime ) ; SEMANTIC_MAKE_FAMILY_GET_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime ) ; SEMANTIC_MAKE_FAMILY_GET_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime ) ; SEMANTIC_MAKE_FAMILY_GET_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime ) ; SEMANTIC_MAKE_FAMILY_GET_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] SEMANTIC_MAKE_FAMILY_INDEX_LIST SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime ) ; SEMANTIC_MAKE_FAMILY_GET_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] SEMANTIC_MAKE_FAMILY_VAR ) ; SEMANTIC_MAKE_FAMILY_GET_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; SEMANTIC_MAKE_FAMILY_GET_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; SEMANTIC_MAKE_FAMILY_GET_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; statement SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; assignStat ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; variable SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; id variableTail SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample variableTail SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample indice SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ arithExpr ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ arithExpr ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ term arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ factor termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ factorTemp SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ id factorPrime SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t factorPrime SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t SEMANTIC_MAKE_FAMILY_INDEX_LIST SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t SEMANTIC_MAKE_FAMILY_VAR SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] SEMANTIC_MAKE_FAMILY_INDEX_LIST SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] SEMANTIC_MAKE_FAMILY_VAR SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = arithExpr exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = term arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = factor termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( arithExpr ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( arithExpr ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( term arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( factor termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( factorTemp SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( id factorPrime SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample factorPrime SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample indice SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ arithExpr ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ arithExpr ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ term arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ factor termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ factorTemp SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ id factorPrime SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t factorPrime SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t SEMANTIC_MAKE_FAMILY_INDEX_LIST SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t SEMANTIC_MAKE_FAMILY_VAR SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] SEMANTIC_MAKE_FAMILY_INDEX_LIST SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] SEMANTIC_MAKE_FAMILY_VAR SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] multOp factor SEMANTIC_MAKE_FAMILY_MULT_OP termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * factor SEMANTIC_MAKE_FAMILY_MULT_OP termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * factor SEMANTIC_MAKE_FAMILY_MULT_OP termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * factorTemp SEMANTIC_MAKE_FAMILY_FACTOR SEMANTIC_MAKE_FAMILY_MULT_OP termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * id factorPrime SEMANTIC_MAKE_FAMILY_FACTOR SEMANTIC_MAKE_FAMILY_MULT_OP termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize factorPrime SEMANTIC_MAKE_FAMILY_FACTOR SEMANTIC_MAKE_FAMILY_MULT_OP termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( aParams ) SEMANTIC_MAKE_FAMILY_F_CALL SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR SEMANTIC_MAKE_FAMILY_MULT_OP termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( aParams ) SEMANTIC_MAKE_FAMILY_F_CALL SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR SEMANTIC_MAKE_FAMILY_MULT_OP termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) SEMANTIC_MAKE_FAMILY_F_CALL SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR SEMANTIC_MAKE_FAMILY_MULT_OP termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) SEMANTIC_MAKE_FAMILY_F_CALL SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR SEMANTIC_MAKE_FAMILY_MULT_OP termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) SEMANTIC_MAKE_FAMILY_VAR SEMANTIC_MAKE_FAMILY_FACTOR SEMANTIC_MAKE_FAMILY_MULT_OP termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) SEMANTIC_MAKE_FAMILY_FACTOR_ARITH_EXPR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; SEMANTIC_MAKE_FAMILY_ST_BLOCK } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } SEMANTIC_MAKE_FAMILY_STATEMENT_BLOCK ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; SEMANTIC_MAKE_FAMILY_FOR_STAT SEMANTIC_MAKE_FAMILY_STATEMENT ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; statement SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; assignStat ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; variable SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; id variableTail SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue variableTail SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue SEMANTIC_MAKE_FAMILY_INDEX_LIST SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue SEMANTIC_MAKE_FAMILY_VAR SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = arithExpr exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = term arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = factor termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = factorTemp SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = id factorPrime SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility factorPrime SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility SEMANTIC_MAKE_FAMILY_INDEX_LIST SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . factorTemp SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . factorTemp SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . id factorPrime SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax factorPrime SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( aParams ) SEMANTIC_MAKE_FAMILY_F_CALL SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( aParams ) SEMANTIC_MAKE_FAMILY_F_CALL SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( expr aParamsTailRep SEMANTIC_MAKE_FAMILY_A_PARAMS ) SEMANTIC_MAKE_FAMILY_F_CALL SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( arithExpr exprTail SEMANTIC_MAKE_FAMILY_EXPR aParamsTailRep SEMANTIC_MAKE_FAMILY_A_PARAMS ) SEMANTIC_MAKE_FAMILY_F_CALL SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( term arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR aParamsTailRep SEMANTIC_MAKE_FAMILY_A_PARAMS ) SEMANTIC_MAKE_FAMILY_F_CALL SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( factor termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR aParamsTailRep SEMANTIC_MAKE_FAMILY_A_PARAMS ) SEMANTIC_MAKE_FAMILY_F_CALL SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( factorTemp SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR aParamsTailRep SEMANTIC_MAKE_FAMILY_A_PARAMS ) SEMANTIC_MAKE_FAMILY_F_CALL SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( id factorPrime SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR aParamsTailRep SEMANTIC_MAKE_FAMILY_A_PARAMS ) SEMANTIC_MAKE_FAMILY_F_CALL SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample factorPrime SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR aParamsTailRep SEMANTIC_MAKE_FAMILY_A_PARAMS ) SEMANTIC_MAKE_FAMILY_F_CALL SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR aParamsTailRep SEMANTIC_MAKE_FAMILY_A_PARAMS ) SEMANTIC_MAKE_FAMILY_F_CALL SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample SEMANTIC_MAKE_FAMILY_INDEX_LIST SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR aParamsTailRep SEMANTIC_MAKE_FAMILY_A_PARAMS ) SEMANTIC_MAKE_FAMILY_F_CALL SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample SEMANTIC_MAKE_FAMILY_VAR SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR aParamsTailRep SEMANTIC_MAKE_FAMILY_A_PARAMS ) SEMANTIC_MAKE_FAMILY_F_CALL SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR aParamsTailRep SEMANTIC_MAKE_FAMILY_A_PARAMS ) SEMANTIC_MAKE_FAMILY_F_CALL SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR aParamsTailRep SEMANTIC_MAKE_FAMILY_A_PARAMS ) SEMANTIC_MAKE_FAMILY_F_CALL SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample SEMANTIC_MAKE_FAMILY_EXPR aParamsTailRep SEMANTIC_MAKE_FAMILY_A_PARAMS ) SEMANTIC_MAKE_FAMILY_F_CALL SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample SEMANTIC_MAKE_FAMILY_A_PARAMS ) SEMANTIC_MAKE_FAMILY_F_CALL SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) SEMANTIC_MAKE_FAMILY_F_CALL SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) SEMANTIC_MAKE_FAMILY_VAR SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; statement SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; assignStat ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; variable SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; id variableTail SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue variableTail SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue SEMANTIC_MAKE_FAMILY_INDEX_LIST SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue SEMANTIC_MAKE_FAMILY_VAR SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = arithExpr exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = term arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = factor termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = factorTemp SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = id factorPrime SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility factorPrime SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility SEMANTIC_MAKE_FAMILY_INDEX_LIST SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . factorTemp SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . factorTemp SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . id factorPrime SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin factorPrime SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( aParams ) SEMANTIC_MAKE_FAMILY_F_CALL SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( aParams ) SEMANTIC_MAKE_FAMILY_F_CALL SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( expr aParamsTailRep SEMANTIC_MAKE_FAMILY_A_PARAMS ) SEMANTIC_MAKE_FAMILY_F_CALL SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( arithExpr exprTail SEMANTIC_MAKE_FAMILY_EXPR aParamsTailRep SEMANTIC_MAKE_FAMILY_A_PARAMS ) SEMANTIC_MAKE_FAMILY_F_CALL SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( term arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR aParamsTailRep SEMANTIC_MAKE_FAMILY_A_PARAMS ) SEMANTIC_MAKE_FAMILY_F_CALL SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( factor termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR aParamsTailRep SEMANTIC_MAKE_FAMILY_A_PARAMS ) SEMANTIC_MAKE_FAMILY_F_CALL SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( factorTemp SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR aParamsTailRep SEMANTIC_MAKE_FAMILY_A_PARAMS ) SEMANTIC_MAKE_FAMILY_F_CALL SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( id factorPrime SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR aParamsTailRep SEMANTIC_MAKE_FAMILY_A_PARAMS ) SEMANTIC_MAKE_FAMILY_F_CALL SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample factorPrime SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR aParamsTailRep SEMANTIC_MAKE_FAMILY_A_PARAMS ) SEMANTIC_MAKE_FAMILY_F_CALL SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR aParamsTailRep SEMANTIC_MAKE_FAMILY_A_PARAMS ) SEMANTIC_MAKE_FAMILY_F_CALL SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample SEMANTIC_MAKE_FAMILY_INDEX_LIST SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR aParamsTailRep SEMANTIC_MAKE_FAMILY_A_PARAMS ) SEMANTIC_MAKE_FAMILY_F_CALL SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample SEMANTIC_MAKE_FAMILY_VAR SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR aParamsTailRep SEMANTIC_MAKE_FAMILY_A_PARAMS ) SEMANTIC_MAKE_FAMILY_F_CALL SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR aParamsTailRep SEMANTIC_MAKE_FAMILY_A_PARAMS ) SEMANTIC_MAKE_FAMILY_F_CALL SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR aParamsTailRep SEMANTIC_MAKE_FAMILY_A_PARAMS ) SEMANTIC_MAKE_FAMILY_F_CALL SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample SEMANTIC_MAKE_FAMILY_EXPR aParamsTailRep SEMANTIC_MAKE_FAMILY_A_PARAMS ) SEMANTIC_MAKE_FAMILY_F_CALL SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample SEMANTIC_MAKE_FAMILY_A_PARAMS ) SEMANTIC_MAKE_FAMILY_F_CALL SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) SEMANTIC_MAKE_FAMILY_F_CALL SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) SEMANTIC_MAKE_FAMILY_VAR SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; statement SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; assignStat ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; variable SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; id variableTail SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility variableTail SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility SEMANTIC_MAKE_FAMILY_INDEX_LIST SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . variable SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . variable SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . id variableTail SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 variableTail SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 indice SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ arithExpr ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ arithExpr ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ term arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ factor termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ integer SEMANTIC_MAKE_FAMILY_FACTOR_NUM termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 SEMANTIC_MAKE_FAMILY_FACTOR_NUM termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] indice SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ arithExpr ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ arithExpr ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ term arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ factor termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ integer SEMANTIC_MAKE_FAMILY_FACTOR_NUM termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 SEMANTIC_MAKE_FAMILY_FACTOR_NUM termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] indice SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ arithExpr ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ arithExpr ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ term arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ factor termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ integer SEMANTIC_MAKE_FAMILY_FACTOR_NUM termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 SEMANTIC_MAKE_FAMILY_FACTOR_NUM termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] indice SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ arithExpr ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ arithExpr ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ term arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ factor termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ integer SEMANTIC_MAKE_FAMILY_FACTOR_NUM termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 SEMANTIC_MAKE_FAMILY_FACTOR_NUM termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] indice SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ arithExpr ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ arithExpr ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ term arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ factor termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ integer SEMANTIC_MAKE_FAMILY_FACTOR_NUM termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 SEMANTIC_MAKE_FAMILY_FACTOR_NUM termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] indice SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ arithExpr ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ arithExpr ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ term arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ factor termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ integer SEMANTIC_MAKE_FAMILY_FACTOR_NUM termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 SEMANTIC_MAKE_FAMILY_FACTOR_NUM termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] indice SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ arithExpr ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ arithExpr ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ term arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ factor termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ integer SEMANTIC_MAKE_FAMILY_FACTOR_NUM termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 SEMANTIC_MAKE_FAMILY_FACTOR_NUM termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] SEMANTIC_MAKE_FAMILY_INDEX_LIST SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] SEMANTIC_MAKE_FAMILY_VAR SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = arithExpr exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = term arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = factor termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = integer SEMANTIC_MAKE_FAMILY_FACTOR_NUM termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 SEMANTIC_MAKE_FAMILY_FACTOR_NUM termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; statement SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; assignStat ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; variable SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; id variableTail SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility variableTail SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility indice SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ arithExpr ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ arithExpr ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ term arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ factor termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ factorTemp SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ id factorPrime SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility factorPrime SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility SEMANTIC_MAKE_FAMILY_INDEX_LIST SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . factorTemp SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . factorTemp SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . id factorPrime SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 factorPrime SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 indice SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ arithExpr ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ arithExpr ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ term arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ factor termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ integer SEMANTIC_MAKE_FAMILY_FACTOR_NUM termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 SEMANTIC_MAKE_FAMILY_FACTOR_NUM termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] indice SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ arithExpr ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ arithExpr ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ term arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ factor termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ integer SEMANTIC_MAKE_FAMILY_FACTOR_NUM termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 SEMANTIC_MAKE_FAMILY_FACTOR_NUM termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] indice SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ arithExpr ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ arithExpr ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ term arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ factor termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ integer SEMANTIC_MAKE_FAMILY_FACTOR_NUM termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 SEMANTIC_MAKE_FAMILY_FACTOR_NUM termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] indice SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ arithExpr ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ arithExpr ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ term arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ factor termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ integer SEMANTIC_MAKE_FAMILY_FACTOR_NUM termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 SEMANTIC_MAKE_FAMILY_FACTOR_NUM termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] indice SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ arithExpr ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ arithExpr ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ term arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ factor termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ integer SEMANTIC_MAKE_FAMILY_FACTOR_NUM termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 SEMANTIC_MAKE_FAMILY_FACTOR_NUM termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] indice SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ arithExpr ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ arithExpr ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ term arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ factor termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ integer SEMANTIC_MAKE_FAMILY_FACTOR_NUM termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 SEMANTIC_MAKE_FAMILY_FACTOR_NUM termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] indice SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ arithExpr ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ arithExpr ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ term arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ factor termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ factorTemp SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ id factorPrime SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx factorPrime SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx SEMANTIC_MAKE_FAMILY_INDEX_LIST SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx SEMANTIC_MAKE_FAMILY_VAR SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx addOp term SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + term SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + term SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + factor termTail SEMANTIC_MAKE_FAMILY_TERM SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + factorTemp SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + id factorPrime SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue factorPrime SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue SEMANTIC_MAKE_FAMILY_INDEX_LIST SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue SEMANTIC_MAKE_FAMILY_VAR SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue SEMANTIC_MAKE_FAMILY_TERM SEMANTIC_MAKE_FAMILY_ARITH_EXPR arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue ] SEMANTIC_MAKE_FAMILY_INDEX_LIST SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue ] SEMANTIC_MAKE_FAMILY_VAR SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue ] SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue ] SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue ] ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue ] ] indice SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue ] ] [ arithExpr ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue ] ] [ arithExpr ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue ] ] [ term arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue ] ] [ factor termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue ] ] [ integer SEMANTIC_MAKE_FAMILY_FACTOR_NUM termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue ] ] [ 1 SEMANTIC_MAKE_FAMILY_FACTOR_NUM termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue ] ] [ 1 SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue ] ] [ 1 SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue ] ] [ 1 ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue ] ] [ 1 ] indice SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue ] ] [ 1 ] [ arithExpr ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue ] ] [ 1 ] [ arithExpr ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue ] ] [ 1 ] [ term arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue ] ] [ 1 ] [ factor termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue ] ] [ 1 ] [ integer SEMANTIC_MAKE_FAMILY_FACTOR_NUM termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue ] ] [ 1 ] [ 1 SEMANTIC_MAKE_FAMILY_FACTOR_NUM termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue ] ] [ 1 ] [ 1 SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue ] ] [ 1 ] [ 1 SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue ] ] [ 1 ] [ 1 ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue ] ] [ 1 ] [ 1 ] indice SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue ] ] [ 1 ] [ 1 ] [ arithExpr ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue ] ] [ 1 ] [ 1 ] [ arithExpr ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue ] ] [ 1 ] [ 1 ] [ term arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue ] ] [ 1 ] [ 1 ] [ factor termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue ] ] [ 1 ] [ 1 ] [ integer SEMANTIC_MAKE_FAMILY_FACTOR_NUM termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue ] ] [ 1 ] [ 1 ] [ 1 SEMANTIC_MAKE_FAMILY_FACTOR_NUM termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue ] ] [ 1 ] [ 1 ] [ 1 SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue ] ] [ 1 ] [ 1 ] [ 1 SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue ] ] [ 1 ] [ 1 ] [ 1 ] SEMANTIC_MAKE_FAMILY_INDICE SEMANTIC_MAKE_SIBLING_COMMON indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue ] ] [ 1 ] [ 1 ] [ 1 ] SEMANTIC_MAKE_FAMILY_INDEX_LIST SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue ] ] [ 1 ] [ 1 ] [ 1 ] . variable SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue ] ] [ 1 ] [ 1 ] [ 1 ] . variable SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue ] ] [ 1 ] [ 1 ] [ 1 ] . id variableTail SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue ] ] [ 1 ] [ 1 ] [ 1 ] . var2 variableTail SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue ] ] [ 1 ] [ 1 ] [ 1 ] . var2 indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue ] ] [ 1 ] [ 1 ] [ 1 ] . var2 SEMANTIC_MAKE_FAMILY_INDEX_LIST SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT variablePrime SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue ] ] [ 1 ] [ 1 ] [ 1 ] . var2 SEMANTIC_MAKE_FAMILY_VAR SEMANTIC_MAKE_FAMILY_ASSIGN_LEFT_VAR assignOp expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue ] ] [ 1 ] [ 1 ] [ 1 ] . var2 = expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue ] ] [ 1 ] [ 1 ] [ 1 ] . var2 = expr SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue ] ] [ 1 ] [ 1 ] [ 1 ] . var2 = arithExpr exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue ] ] [ 1 ] [ 1 ] [ 1 ] . var2 = term arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue ] ] [ 1 ] [ 1 ] [ 1 ] . var2 = factor termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue ] ] [ 1 ] [ 1 ] [ 1 ] . var2 = float SEMANTIC_MAKE_FAMILY_FACTOR_NUM termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue ] ] [ 1 ] [ 1 ] [ 1 ] . var2 = 2.5 SEMANTIC_MAKE_FAMILY_FACTOR_NUM termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue ] ] [ 1 ] [ 1 ] [ 1 ] . var2 = 2.5 SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue ] ] [ 1 ] [ 1 ] [ 1 ] . var2 = 2.5 SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue ] ] [ 1 ] [ 1 ] [ 1 ] . var2 = 2.5 SEMANTIC_MAKE_FAMILY_EXPR SEMANTIC_MAKE_FAMILY_ASSIGN_STAT ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue ] ] [ 1 ] [ 1 ] [ 1 ] . var2 = 2.5 ; SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue ] ] [ 1 ] [ 1 ] [ 1 ] . var2 = 2.5 ; statement SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue ] ] [ 1 ] [ 1 ] [ 1 ] . var2 = 2.5 ; put ( expr ) ; SEMANTIC_MAKE_FAMILY_PUT_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue ] ] [ 1 ] [ 1 ] [ 1 ] . var2 = 2.5 ; put ( expr ) ; SEMANTIC_MAKE_FAMILY_PUT_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue ] ] [ 1 ] [ 1 ] [ 1 ] . var2 = 2.5 ; put ( expr ) ; SEMANTIC_MAKE_FAMILY_PUT_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue ] ] [ 1 ] [ 1 ] [ 1 ] . var2 = 2.5 ; put ( arithExpr exprTail SEMANTIC_MAKE_FAMILY_EXPR ) ; SEMANTIC_MAKE_FAMILY_PUT_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue ] ] [ 1 ] [ 1 ] [ 1 ] . var2 = 2.5 ; put ( term arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) ; SEMANTIC_MAKE_FAMILY_PUT_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue ] ] [ 1 ] [ 1 ] [ 1 ] . var2 = 2.5 ; put ( factor termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) ; SEMANTIC_MAKE_FAMILY_PUT_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue ] ] [ 1 ] [ 1 ] [ 1 ] . var2 = 2.5 ; put ( factorTemp SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) ; SEMANTIC_MAKE_FAMILY_PUT_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue ] ] [ 1 ] [ 1 ] [ 1 ] . var2 = 2.5 ; put ( id factorPrime SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) ; SEMANTIC_MAKE_FAMILY_PUT_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue ] ] [ 1 ] [ 1 ] [ 1 ] . var2 = 2.5 ; put ( maxValue factorPrime SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) ; SEMANTIC_MAKE_FAMILY_PUT_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue ] ] [ 1 ] [ 1 ] [ 1 ] . var2 = 2.5 ; put ( maxValue indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) ; SEMANTIC_MAKE_FAMILY_PUT_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue ] ] [ 1 ] [ 1 ] [ 1 ] . var2 = 2.5 ; put ( maxValue SEMANTIC_MAKE_FAMILY_INDEX_LIST SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) ; SEMANTIC_MAKE_FAMILY_PUT_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue ] ] [ 1 ] [ 1 ] [ 1 ] . var2 = 2.5 ; put ( maxValue SEMANTIC_MAKE_FAMILY_VAR SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) ; SEMANTIC_MAKE_FAMILY_PUT_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue ] ] [ 1 ] [ 1 ] [ 1 ] . var2 = 2.5 ; put ( maxValue SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) ; SEMANTIC_MAKE_FAMILY_PUT_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue ] ] [ 1 ] [ 1 ] [ 1 ] . var2 = 2.5 ; put ( maxValue SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) ; SEMANTIC_MAKE_FAMILY_PUT_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue ] ] [ 1 ] [ 1 ] [ 1 ] . var2 = 2.5 ; put ( maxValue SEMANTIC_MAKE_FAMILY_EXPR ) ; SEMANTIC_MAKE_FAMILY_PUT_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue ] ] [ 1 ] [ 1 ] [ 1 ] . var2 = 2.5 ; put ( maxValue ) ; SEMANTIC_MAKE_FAMILY_PUT_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue ] ] [ 1 ] [ 1 ] [ 1 ] . var2 = 2.5 ; put ( maxValue ) ; SEMANTIC_MAKE_FAMILY_PUT_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue ] ] [ 1 ] [ 1 ] [ 1 ] . var2 = 2.5 ; put ( maxValue ) ; statement SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue ] ] [ 1 ] [ 1 ] [ 1 ] . var2 = 2.5 ; put ( maxValue ) ; put ( expr ) ; SEMANTIC_MAKE_FAMILY_PUT_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue ] ] [ 1 ] [ 1 ] [ 1 ] . var2 = 2.5 ; put ( maxValue ) ; put ( expr ) ; SEMANTIC_MAKE_FAMILY_PUT_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue ] ] [ 1 ] [ 1 ] [ 1 ] . var2 = 2.5 ; put ( maxValue ) ; put ( expr ) ; SEMANTIC_MAKE_FAMILY_PUT_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue ] ] [ 1 ] [ 1 ] [ 1 ] . var2 = 2.5 ; put ( maxValue ) ; put ( arithExpr exprTail SEMANTIC_MAKE_FAMILY_EXPR ) ; SEMANTIC_MAKE_FAMILY_PUT_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue ] ] [ 1 ] [ 1 ] [ 1 ] . var2 = 2.5 ; put ( maxValue ) ; put ( term arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) ; SEMANTIC_MAKE_FAMILY_PUT_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue ] ] [ 1 ] [ 1 ] [ 1 ] . var2 = 2.5 ; put ( maxValue ) ; put ( factor termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) ; SEMANTIC_MAKE_FAMILY_PUT_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue ] ] [ 1 ] [ 1 ] [ 1 ] . var2 = 2.5 ; put ( maxValue ) ; put ( factorTemp SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) ; SEMANTIC_MAKE_FAMILY_PUT_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue ] ] [ 1 ] [ 1 ] [ 1 ] . var2 = 2.5 ; put ( maxValue ) ; put ( id factorPrime SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) ; SEMANTIC_MAKE_FAMILY_PUT_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue ] ] [ 1 ] [ 1 ] [ 1 ] . var2 = 2.5 ; put ( maxValue ) ; put ( minValue factorPrime SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) ; SEMANTIC_MAKE_FAMILY_PUT_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue ] ] [ 1 ] [ 1 ] [ 1 ] . var2 = 2.5 ; put ( maxValue ) ; put ( minValue indiceRep SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) ; SEMANTIC_MAKE_FAMILY_PUT_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue ] ] [ 1 ] [ 1 ] [ 1 ] . var2 = 2.5 ; put ( maxValue ) ; put ( minValue SEMANTIC_MAKE_FAMILY_INDEX_LIST SEMANTIC_MAKE_FAMILY_DATA_MEMBER SEMANTIC_MAKE_FAMILY_VAR_ELEMENT factorTempA SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) ; SEMANTIC_MAKE_FAMILY_PUT_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue ] ] [ 1 ] [ 1 ] [ 1 ] . var2 = 2.5 ; put ( maxValue ) ; put ( minValue SEMANTIC_MAKE_FAMILY_VAR SEMANTIC_MAKE_FAMILY_FACTOR termTail SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) ; SEMANTIC_MAKE_FAMILY_PUT_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue ] ] [ 1 ] [ 1 ] [ 1 ] . var2 = 2.5 ; put ( maxValue ) ; put ( minValue SEMANTIC_MAKE_FAMILY_TERM arithExprTAIL SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) ; SEMANTIC_MAKE_FAMILY_PUT_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue ] ] [ 1 ] [ 1 ] [ 1 ] . var2 = 2.5 ; put ( maxValue ) ; put ( minValue SEMANTIC_MAKE_FAMILY_ARITH_EXPR_FINAL exprTail SEMANTIC_MAKE_FAMILY_EXPR ) ; SEMANTIC_MAKE_FAMILY_PUT_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue ] ] [ 1 ] [ 1 ] [ 1 ] . var2 = 2.5 ; put ( maxValue ) ; put ( minValue SEMANTIC_MAKE_FAMILY_EXPR ) ; SEMANTIC_MAKE_FAMILY_PUT_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue ] ] [ 1 ] [ 1 ] [ 1 ] . var2 = 2.5 ; put ( maxValue ) ; put ( minValue ) ; SEMANTIC_MAKE_FAMILY_PUT_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue ] ] [ 1 ] [ 1 ] [ 1 ] . var2 = 2.5 ; put ( maxValue ) ; put ( minValue ) ; SEMANTIC_MAKE_FAMILY_PUT_STAT SEMANTIC_MAKE_FAMILY_STATEMENT SEMANTIC_MAKE_SIBLING_COMMON ST } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue ] ] [ 1 ] [ 1 ] [ 1 ] . var2 = 2.5 ; put ( maxValue ) ; put ( minValue ) ; SEMANTIC_MAKE_FAMILY_ST_BLOCK } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue ] ] [ 1 ] [ 1 ] [ 1 ] . var2 = 2.5 ; put ( maxValue ) ; put ( minValue ) ; } SEMANTIC_MAKE_FAMILY_STAT_BODY ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue ] ] [ 1 ] [ 1 ] [ 1 ] . var2 = 2.5 ; put ( maxValue ) ; put ( minValue ) ; } ; SEMANTIC_MAKE_FAMILY_PROG 
class InheritedUtility { int member1 ; } ; class Utility : InheritedUtility { int var1 [ 4 ] [ 5 ] [ 7 ] [ 8 ] [ 9 ] [ 1 ] [ 0 ] ; float var2 ; int findMax ( int array [ 100 ] ) ; int findMin ( int array [ 100 ] ) ; } ; int Utility sr findMax ( int array [ 100 ] ) { int maxValue ; int idx ; maxValue = array [ 100 ] ; for ( int idx = 99 ; idx gt 0 ; idx = idx - 1 ) { if ( array [ idx ] gt maxValue ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( maxValue ) ; } ; int Utility sr findMin ( int array [ 100 ] ) { int minValue ; int idx ; minValue = array [ 100 ] ; for ( int idx = 1 ; idx leq 99 ; idx = ( idx ) + 1 ) { if ( array [ idx ] lt maxValue + 1 / 8 or idx ) then { maxValue = array [ idx ] ; } else { } ; } ; return ( minValue ) ; } ; float randomize ( ) { float value ; value = 100 * ( 2 + 3.0 / 7.0006 ) ; value = 1.05 + ( ( 2.04 * 2.47 ) - 3.0 ) + 7.0006 gt 1 and not - 1 ; return ( value ) ; } ; program { int sample [ 100 ] ; int idx ; int maxValue ; int minValue ; Utility utility ; Utility arrayUtility [ 2 ] [ 3 ] [ 6 ] [ 7 ] ; for ( int t = 0 ; t leq 100 ; t = t + 1 ) { get ( sample [ t ] ) ; sample [ t ] = ( sample [ t ] * randomize ( ) ) ; } ; maxValue = utility . findMax ( sample ) ; minValue = utility . findMin ( sample ) ; utility . var1 [ 4 ] [ 1 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] [ 0 ] = 10 ; arrayUtility [ utility . var1 [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] [ idx + maxValue ] ] [ 1 ] [ 1 ] [ 1 ] . var2 = 2.5 ; put ( maxValue ) ; put ( minValue ) ; } ; 
